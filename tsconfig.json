{
  "compilerOptions": {
    // 编译目标和模块系统
    "target": "esnext",        // 编译到最新的 ES 标准
    "module": "esnext",        // 使用 ES 模块系统
    
    // 类型检查选项
    "strict": true,            // 启用所有严格类型检查
    "jsx": "preserve",         // 保留 JSX 以供其他工具处理
    "moduleResolution": "node", // 使用 Node.js 风格的模块解析
    "allowJs": true,           // 允许编译 JavaScript 文件
    
    // 模块导入选项
    "esModuleInterop": true,   // 启用 CommonJS 和 ES 模块之间的互操作性
    "allowSyntheticDefaultImports": true, // 允许从没有默认导出的模块中默认导入
    
    // 其他编译选项
    "forceConsistentCasingInFileNames": true, // 强制文件名大小写一致
    "useDefineForClassFields": true,  // 使用 define 语义的类字段
    "sourceMap": true,        // 生成源映射文件
    
    // 路径和类型配置
    "baseUrl": ".",          // 基础目录
    "types": [               // 要包含的类型声明文件
      "webpack-env"
    ],
    "paths": {              // 路径别名配置
      "@/*": [
        "src/*"
      ]
    },
    "lib": [               // 编译需要包含的库文件
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  },
  
  // 项目文件配置
  "include": [            // 需要编译的文件
    "src/**/*.ts",       // 所有 TypeScript 文件
    "src/**/*.tsx",      // TypeScript JSX 文件
    "src/**/*.vue",      // Vue 单文件组件
    "tests/**/*.ts",     // 测试文件
    "tests/**/*.tsx"     // 测试 JSX 文件
  ],
  "exclude": [           // 排除的文件
    "node_modules"       // 不编译 node_modules 目录
  ]
}

/**
这个配置文件的主要作用是：
1. 编译器选项配置：
设置 TypeScript 编译器的行为
定义代码检查的严格程度
配置模块解析方式
项目结构定义：
指定哪些文件需要编译
设置文件路径别名
配置类型声明文件
开发体验优化：
启用源码映射
配置模块导入方式
设置编译目标环境
类型系统配置：
指定使用的类型定义
配置类型检查的严格程度
设置模块解析策略
这个文件是 TypeScript 项目的核心配置文件，决定了项目的编译行为和类型检查规则
*/